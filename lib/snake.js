// Generated by CoffeeScript 1.3.3
(function() {

  $(function() {
    var checkKey, drawCherry, drawScene, drawSnakePart, generateCherry, generateSnake, init, move, moveDown, moveLeft, moveRight, moveUp,
      _this = this;
    this.snake = {
      parts: [[0, 100], [0, 75], [0, 50], [0, 25], [0, 0]],
      moveVal: 25,
      currentDirection: 'down',
      cherryPos: [10, 10]
    };
    this.ctx = null;
    init = function() {
      var canvas;
      canvas = document.getElementById('canvas');
      _this.ctx = canvas.getContext('2d');
      return drawScene();
    };
    drawScene = function() {
      var fps;
      fps = 10;
      return setTimeout(function() {
        window.webkitRequestAnimationFrame(drawScene);
        _this.ctx.clearRect(0, 0, 600, 600);
        move();
        return drawCherry();
      }, 1000 / fps);
    };
    generateCherry = function() {
      return drawCherry(10, 10);
    };
    drawCherry = function(x, y) {
      _this.ctx.fillStyle = "red";
      return _this.ctx.fillRect(10, 10, 25, 25);
    };
    drawSnakePart = function(x, y) {
      _this.ctx.fillStyle = "rgba(0, 0, 200, 0.5)";
      return _this.ctx.fillRect(x, y, 25, 25);
    };
    generateSnake = function() {
      return _.each(_this.snake.parts, function(num) {
        return drawSnakePart(num[0], num[1]);
      });
    };
    moveDown = function() {
      var newX, newY;
      _this.snake.parts.pop();
      newX = _this.snake.parts[0][0];
      newY = _this.snake.parts[0][1] + _this.snake.moveVal;
      _this.snake.parts.unshift([newX, newY]);
      _this.snake.currentDirection = 'down';
      return generateSnake();
    };
    moveUp = function() {
      var newX, newY;
      _this.snake.parts.pop();
      newX = _this.snake.parts[0][0];
      newY = _this.snake.parts[0][1] - _this.snake.moveVal;
      _this.snake.parts.unshift([newX, newY]);
      _this.snake.currentDirection = 'up';
      return generateSnake();
    };
    moveLeft = function() {
      var newX, newY;
      _this.snake.parts.pop();
      newX = _this.snake.parts[0][0] - _this.snake.moveVal;
      newY = _this.snake.parts[0][1];
      _this.snake.parts.unshift([newX, newY]);
      _this.snake.currentDirection = 'left';
      return generateSnake();
    };
    moveRight = function() {
      var newX, newY;
      _this.snake.parts.pop();
      newX = _this.snake.parts[0][0] + _this.snake.moveVal;
      newY = _this.snake.parts[0][1];
      _this.snake.parts.unshift([newX, newY]);
      _this.snake.currentDirection = 'right';
      return generateSnake();
    };
    move = function() {
      switch (_this.snake.currentDirection) {
        case 'up':
          return moveUp();
        case 'down':
          return moveDown();
        case 'right':
          return moveRight();
        case 'left':
          return moveLeft();
      }
    };
    checkKey = function(e) {
      switch (e.keyCode) {
        case 40:
          return moveDown();
        case 38:
          return moveUp();
        case 37:
          return moveLeft();
        case 39:
          return moveRight();
        default:
          return console.log('other');
      }
    };
    init();
    return $(document).keydown(function(e) {
      return checkKey(e);
    });
  });

}).call(this);
