// Generated by CoffeeScript 1.3.3
(function() {

  $(function() {
    var dragObj, findObj, hoverFun, isDrag, isSelected, mouseDownFun, mouseMoveFun, mouseUpFun, newPath, path, rect,
      _this = this;
    this.isMouseDown = false;
    this.isMouseDragged = false;
    this.currentlySelected = null;
    mouseDownFun = function(e) {
      console.log(e.e.layerX);
      console.log(e);
      _this.isMouseDown = true;
      _this.selectedObj = findObj(e.e.layerX, e.e.layerY);
      if (_this.currentlySelected) {
        return _this.currentlySelected.obj.set('active', true);
      }
    };
    mouseUpFun = function(e) {
      _this.isMouseDown = false;
      if (_this.currentlySelected !== null) {
        _this.currentlySelected.obj.set('active', false);
        _this.canvas.renderAll();
        return _this.currentlySelected = null;
      }
    };
    mouseMoveFun = function(e) {
      var left, top;
      if (_this.isMouseDown && _this.currentlySelected) {
        left = _this.currentlySelected.obj.get('left');
        console.log(left);
        top = _this.currentlySelected.obj.get('top');
        console.log(top);
        _this.currentlySelected.obj.set('left', e.e.layerX - (((_this.currentlySelected.masterGroupWidth / 2) + 100) + _this.currentlySelected.selectedAreaX));
        _this.currentlySelected.obj.set('top', e.e.layerY - (((_this.currentlySelected.masterGroupHeight / 2) + 100) + _this.currentlySelected.selectedAreaY));
        _this.canvas.renderAll();
        return console.log(_this.currentlySelected);
      }
    };
    hoverFun = function(e) {
      console.log('object Over');
      return console.log(e);
    };
    isDrag = function(e) {};
    findObj = function(mouseX, mouseY) {
      var index, left, masterGroupHeight, masterGroupWidth, masterGroupX, masterGroupY, newPositionX, newPositionY, obj, objHeight, objPosX, objPosY, objWidth, top, _ref, _results;
      masterGroupWidth = _this.masterGroup.get('width');
      masterGroupHeight = _this.masterGroup.get('height');
      masterGroupX = _this.masterGroup.get('left') - (masterGroupWidth / 2);
      masterGroupY = _this.masterGroup.get('top') - (masterGroupHeight / 2);
      _ref = _this.masterGroup.objects;
      _results = [];
      for (index in _ref) {
        obj = _ref[index];
        objWidth = obj.get('width');
        objHeight = obj.get('height');
        top = obj.get('top');
        left = obj.get('left');
        newPositionX = ((masterGroupWidth / 2) - (obj.get('width') / 2)) + left;
        newPositionY = ((masterGroupHeight / 2) - (obj.get('height') / 2)) + top;
        objPosX = newPositionX + masterGroupX;
        objPosY = newPositionY + masterGroupY;
        if (isSelected(mouseX, mouseY, objPosX, objPosY, objWidth, objHeight)) {
          console.log("newPositionY: " + newPositionY);
          _results.push(_this.currentlySelected = {
            obj: obj,
            mouseX: mouseX,
            mouseY: mouseY,
            selectedAreaX: (mouseX - objPosX) - (objHeight / 2),
            selectedAreaY: (mouseY - objPosY) - (objHeight / 2),
            masterGroupX: masterGroupX,
            masterGroupY: masterGroupY,
            masterGroupWidth: masterGroupWidth,
            masterGroupHeight: masterGroupHeight
          });
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    isSelected = function(mouseX, mouseY, objPosX, objPosY, objWidth, objHeight) {
      if (mouseX >= objPosX && mouseX <= objPosX + objWidth) {
        if (mouseY >= objPosY && mouseY <= objPosY + objHeight) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };
    dragObj = function(obj, top, left) {};
    this.canvas = new fabric.Canvas('canvas');
    this.canvas.selection = false;
    path = "M110.689 661.75q34.0957 0 54.4473 -19.6992q21.8965 -19.7002 21.8965 -55.7695v-220.844l141.281 121l0.34375 -0.40625q20.2031 15.5625 45.7188 15.5625q31.0508 0 53.0254 -21.9746t21.9746 -53.0254q0 -21.0391 -10.7559 -38.6787 q-10.7559 -17.6387 -28.6504 -27.3213l-91.0312 -78.6875l135.438 -166.781q13.5 -16.624 13.5 -43.625q-0.00195312 -31.0518 -21.9746 -53.0254q-21.9746 -21.9746 -53.0254 -21.9746q-35.0371 0 -57.5625 26.9688l-130.469 159.812l-17.8125 -15.375v-93.0625 q0 -30.8301 -20.5332 -51.9619t-54.7168 -21.1318q-32.5996 0 -53.1895 20.2246q-20.5938 20.2256 -20.5938 50.9316v510.5q0 32.3896 20.375 55.3672q20.375 22.9766 52.3145 22.9766z";
    newPath = new fabric.Path(path);
    rect = new fabric.Rect();
    this.masterGroup = new fabric.Group();
    newPath.set('top', 0);
    newPath.set('left', 0);
    newPath.set('stroke', '#000000');
    newPath.set('strokeWidth', 1);
    newPath.set('fill', 'red');
    newPath.scale(0.30);
    this.masterGroup.set('width', 400);
    this.masterGroup.set('height', 400);
    this.masterGroup.set('top', 300);
    this.masterGroup.set('left', 300);
    this.masterGroup.set('selectable', false);
    this.masterGroup.set('strokeWidth', 1);
    this.masterGroup.set('stroke', 'black');
    rect.set('fill', 'red');
    rect.set('width', 100);
    rect.set('height', 100);
    rect.set('left', 100);
    rect.set('top', 100);
    this.masterGroup.add(rect);
    this.canvas.add(this.masterGroup);
    newPath.set('selectable', true);
    newPath.set('active', true);
    newPath.set('hasControls', false);
    this.canvas.observe('mouse:down', mouseDownFun);
    this.canvas.observe('mouse:up', mouseUpFun);
    this.canvas.observe('mouse:move', mouseMoveFun);
    this.canvas.observe('object:over', hoverFun);
    this.canvas.renderAll();
    return console.log(this.canvas);
  });

}).call(this);
