// Generated by CoffeeScript 1.3.3
(function() {
  var fabric;

  fabric = (typeof window !== "undefined" && window !== null ? window.fabric : void 0) || require('fabric').fabric;

  fabric.Image.fromBase64 = function(imgOptions) {
    var fabricImage, img;
    img = fabric.document.createElement('img');
    img.src = imgOptions.src;
    fabricImage = new fabric.Image(img, imgOptions);
    fabricImage.set = function(name, val) {
      var ele;
      if (name === 'src') {
        ele = fabricImage.getElement();
        ele.src = val;
        fabricImage.setElement(ele);
      }
      return fabric.Image.prototype.set.call(this, name, val);
    };
    return fabricImage;
  };

  fabric.util.centerGroup = function(canvas, masterGroup) {
    return canvas.centerObjectH(masterGroup).centerObjectV(masterGroup);
  };

  fabric.util.getAspectRatio = function(obj) {
    var aspectRatio, objHeight, objWidth;
    objWidth = fabric.util.getObjSize(obj, 'x');
    objHeight = fabric.util.getObjSize(obj, 'y');
    return aspectRatio = objWidth / objHeight;
  };

  fabric.util.groupResize = function(canvas, masterGroup, percentageSize) {
    var canvasAspectRatio, canvasHeight, canvasWidth, masterGroupAspectRatio;
    canvasAspectRatio = fabric.util.getAspectRatio(canvas);
    masterGroupAspectRatio = fabric.util.getAspectRatio(masterGroup);
    if (canvasAspectRatio > 1 && masterGroupAspectRatio > 1) {
      if (masterGroupAspectRatio > canvasAspectRatio) {
        canvasWidth = canvas.getWidth();
        return masterGroup.scaleToWidth(canvasWidth / 100 * percentageSize);
      } else {
        canvasHeight = canvas.getHeight();
        return masterGroup.scaleToHeight(canvasHeight / 100 * percentageSize);
      }
    } else if (canvasAspectRatio < 1 && masterGroupAspectRatio < 1) {
      if (masterGroupAspectRatio < canvasAspectRatio) {
        canvasHeight = canvas.getHeight();
        return masterGroup.scaleToHeight(canvasHeight / 100 * percentageSize);
      } else {
        canvasWidth = canvas.getWidth();
        return masterGroup.scaleToWidth(canvasWidth);
      }
    } else if (canvasAspectRatio < 1 && masterGroupAspectRatio > 1) {
      canvasWidth = canvas.getWidth();
      return masterGroup.scaleToWidth(canvasWidth / 100 * percentageSize);
    } else if (canvasAspectRatio > 1 && masterGroupAspectRatio < 1) {
      canvasHeight = canvas.getHeight();
      return masterGroup.scaleToHeight(canvasHeight / 100 * percentageSize);
    } else if (canvasAspectRatio = 1 && masterGroupAspectRatio < 1) {
      canvasHeight = canvas.getHeight();
      return masterGroup.scaleToHeight(canvasHeight / 100 * percentageSize);
    } else if (canvasAspectRatio = 1 && masterGroupAspectRatio >= 1) {
      canvasWidth = canvas.getWidth();
      return masterGroup.scaleToWidth(canvasWidth / 100 * percentageSize);
    }
  };

  fabric.util.constrainComponentSize = function(canvas, masterGroup) {
    var currentHeight, currentWidth, heightDif, maxHeight, maxWidth, widthDif;
    currentWidth = masterGroup.currentWidth;
    currentHeight = masterGroup.currentHeight;
    maxWidth = masterGroup.width;
    maxHeight = masterGroup.height;
    if (currentWidth > maxWidth || currentHeight > maxHeight) {
      widthDif = currentWidth - maxWidth;
      heightDif = currentHeight - maxHeight;
      if (widthDif > heightDif) {
        masterGroup.scaleToWidth(maxWidth);
      } else {
        masterGroup.scaleToHeight(maxHeight);
      }
      return fabric.util.centerGroup(canvas, masterGroup);
    }
  };

  fabric.util.canvasResize = function(canvas, isEditor, width, height) {
    var calcHeight, calcWidth, canvasHeight, headerBarHeight, propertyPanelWidth, windowHeight, windowWidth;
    if (isEditor == null) {
      isEditor = true;
    }
    if (width == null) {
      width = null;
    }
    if (height == null) {
      height = null;
    }
    if (isEditor) {
      propertyPanelWidth = 240;
      headerBarHeight = 80;
      windowHeight = $(window).height();
      windowWidth = $(window).width();
      canvasHeight = windowHeight - headerBarHeight;
      calcHeight = canvasHeight;
      calcWidth = windowWidth - propertyPanelWidth;
    } else {
      calcHeight = height;
      calcWidth = width;
    }
    canvas.setWidth(calcWidth);
    return canvas.setHeight(calcHeight);
  };

  fabric.util.getOffsetPosition = function(obj, shape, newPosition, axis) {
    var objSize, shapeCentreX, shapeCentreY, shapeSize, xPosition, yPosition;
    shapeSize = fabric.util.getObjSize(shape, axis);
    objSize = fabric.util.getObjSize(obj, axis);
    if (axis === 'x') {
      shapeCentreX = shapeSize / 2;
      return xPosition = (newPosition - shapeCentreX) + (objSize / 2);
    } else if (axis === 'y') {
      shapeCentreY = shapeSize / 2;
      return yPosition = (newPosition - shapeCentreY) + (objSize / 2);
    }
  };

  fabric.util.getObjSize = function(obj, axis) {
    var size;
    if (obj instanceof fabric.PathGroup) {
      if (axis === 'x') {
        size = obj.paths[0].getWidth();
        if (obj.scaleX) {
          return size = obj.scaleX * size;
        } else {
          return size;
        }
      } else if (axis === 'y') {
        size = obj.paths[0].getHeight();
        if (obj.scaleY) {
          return size = obj.scaleY * size;
        } else {
          return size;
        }
      }
    } else if (obj.objects !== void 0 && obj.objects[0] instanceof fabric.PathGroup) {
      if (axis === 'x') {
        return size = obj.objects[0].paths[0].getWidth();
      } else if (axis === 'y') {
        return size = obj.objects[0].paths[0].getHeight();
      }
    } else {
      if (axis === 'x') {
        return size = obj.getWidth();
      } else if (axis === 'y') {
        return size = obj.getHeight();
      }
    }
  };

}).call(this);
